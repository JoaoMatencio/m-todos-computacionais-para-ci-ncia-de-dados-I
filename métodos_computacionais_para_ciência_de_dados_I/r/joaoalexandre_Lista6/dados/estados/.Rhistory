setwd("/home/douglas/Documents/Dropbox/Projetos/Aulas/R-Avancado/dados/estados")
setwd("/home/douglas/Documents/Dropbox/Projetos/Aulas/R-Avancado/dados/estados")
require(dplyr)
require(rbenchmark)
require(foreach)
require(doMC)   # Alternativa Linux
registerDoMC(cores = detectCores())    # Alternativa Linux
?registerDoSNOW
??registerDoSNOW
require(doSNOW)
detectCores()
sleep_time <- 0.03
bench <- benchmark("for" = for(i in 1:4){Sys.sleep(sleep_time)},
"do" = foreach(n = 1:4) %do% Sys.sleep(sleep_time),
"dopar" = foreach(n = 1:4) %dopar% Sys.sleep(sleep_time),
columns = c("test", "replications",
"elapsed", "user.self", "sys.self"))
bench <- bench %>% arrange(elapsed)
bench
cl <- makeCluster(detectCores())
registerDoParallel(cl)
require(doParallel)                    # Esse
registerDoParallel(cl)
setwd("/home/douglas/Documents/Dropbox/Projetos/Aulas/R-Avancado/dados/estados")
require(dplyr)
require(rbenchmark)
require(foreach)
require(doParallel)                    # Esse
cl <- makeCluster(detectCores())
registerDoParallel(cl)
sleep_time <- 0.03
bench <- benchmark("for" = for(i in 1:4){Sys.sleep(sleep_time)},
"do" = foreach(n = 1:4) %do% Sys.sleep(sleep_time),
"dopar" = foreach(n = 1:4) %dopar% Sys.sleep(sleep_time),
columns = c("test", "replications",
"elapsed", "user.self", "sys.self"))
setwd("/home/douglas/Documents/Dropbox/Projetos/Aulas/R-Avancado/dados/estados")
require(dplyr)
require(rbenchmark)
require(foreach)
require(doParallel)                    # Esse
cl <- makeCluster(detectCores())
registerDoParallel(cl)
sleep_time <- 0.03
bench <- benchmark("for" = for(i in 1:4){Sys.sleep(sleep_time)},
"do" = foreach(n = 1:4) %do% Sys.sleep(sleep_time),
"dopar" = foreach(n = 1:4) %dopar% Sys.sleep(sleep_time),
columns = c("test", "replications",
"elapsed", "user.self", "sys.self"))
require(dplyr)
require(rbenchmark)
require(foreach)
require(doParallel)                    # Esse
#require(parallel)
require(doMC)   # Alternativa Linux
#require(doSNOW) # Alternativa Windows  # Esse
##-- Registrando o número de cores ----
#cl <- makeCluster(detectCores())
#registerDoParallel(cl)
registerDoMC(cores = detectCores())    # Alternativa Linux
#registerDoSNOW(cl = detectCores())
##-- Exemplo 1 ----
##-- + Definindo um tempo de "sono" ----
sleep_time <- 0.03
##-- + Comparando for do e dopar ----
##-- ~30 segundos
bench <- benchmark("for" = for(i in 1:4){Sys.sleep(sleep_time)},
"do" = foreach(n = 1:4) %do% Sys.sleep(sleep_time),
"dopar" = foreach(n = 1:4) %dopar% Sys.sleep(sleep_time),
columns = c("test", "replications",
"elapsed", "user.self", "sys.self"))
bench <- bench %>% arrange(elapsed)
bench
set.seed(1)
n <- 10000
nRep <- 5000
objeto1 <- numeric(nRep)
head(objeto1)
t1 <- Sys.time()
t1 <- Sys.time()
for(i in 1:nRep){
objeto1[i] <- mean(rnorm(n))
}
t2 <- Sys.time()
t3 <- Sys.time()
objeto2 <- foreach(i = 1:nRep) %dopar% {
mean(rnorm(n))
}
t4 <- Sys.time()
class(objeto1)
class(objeto2)
t2 - t1
t4 - t3
objeto2 <- numeric(nRep)
aux <- foreach(i = 1:nRep) %dopar% {
objeto2[i] <- mean(rnorm(n))
}
head(objeto2)
head(aux)
nSamp <- 10000
n <- 5000
tempo <- system.time(est <- foreach(i = 1:nSamp,
.combine = 'rbind') %dopar% {
norm <- rnorm(n)
variancia <- var(norm)
c(summary(norm), variancia)
}
)
tempo
sleep_time <- 0.0001
bench <- benchmark("for" = for(i in 1:4){Sys.sleep(sleep_time)},
"do" = foreach(n = 1:4) %do% Sys.sleep(sleep_time),
"dopar" = foreach(n = 1:4) %dopar% Sys.sleep(sleep_time),
columns = c("test", "replications",
"elapsed", "user.self", "sys.self"))
bench <- bench %>% arrange(elapsed)
bench
require(e1071)
require(mvtnorm)
set.seed(26)
##-- + Criando uma base de dados ----
nCov <- 5   #10
n <- 2000    #5000
X <- rmvnorm(n = n, mean = rep(0, nCov))
betas <- rnorm(n = nCov)
Xbeta <- X%*%betas
y <- ifelse(Xbeta < 0, 0, 1)
data <- data.frame(y = y, X)
##-- + Separando a base em treino e teste ----
id <- 1:nrow(data)
testindex <- sample(id, trunc(length(id)/3))
testset <- data[testindex,]
trainset <- data[-testindex,]
##-- + Criando os grids para avaliação dos parâmetros de tunagem ----
scale = c(TRUE, FALSE)
kernel = c("linear", "polynomial", "radial", "sigmoid")
degree = 2:4
gamma = 1/seq(nrow(trainset)-(n/10), nrow(trainset) + (n/10), length.out = 4)
cost = seq(1, 10, length.out = 4)
parameters <- expand.grid(scale = scale,
kernel = kernel,
degree = degree,
gamma = gamma,
cost = cost)
t1 <- system.time(
svm.output_1 <- foreach(i = 1:nrow(parameters), .combine = 'rbind') %do% {
svm.model <- svm(formula = y ~ .,
data = trainset,
scale = parameters[i, 1],
kernel = parameters[i, 2],
degree = parameters[i, 3],
gamma = parameters[i, 4],
cost = parameters[i, 5],
type = "C-classification")
svm.pred <- predict(svm.model, testset[,-1])
svm.confusao <- table(pred = svm.pred, true = testset[,1])
svm.acuracia <- sum(diag(svm.confusao))/sum(svm.confusao)
cbind(parameters[i,], acuracia = svm.acuracia)
}
)
t1[3]
t2 <- system.time(
svm.output_2 <- foreach(i = 1:nrow(parameters), .combine = 'rbind') %dopar% {
svm.model <- e1071::svm(formula = y ~ .,
data = trainset,
scale = parameters[i, 1],
kernel = parameters[i, 2],
degree = parameters[i, 3],
gamma = parameters[i, 4],
cost = parameters[i, 5],
type = "C-classification")
svm.pred <- predict(svm.model, testset[,-1])
svm.confusao <- table(pred = svm.pred, true = testset[,1])
svm.acuracia <- sum(diag(svm.confusao))/sum(svm.confusao)
cbind(parameters[i,], acuracia = svm.acuracia)
}
)
t2[3]
all.equal(svm.output_1, svm.output_2)
best.config <- svm.output_2 %>% arrange(desc(acuracia)) %>% slice(1)
best.config
set.seed(26)
nCov <- 10
n <- 5000   #10000
cov <- rmvnorm(n = n, mean = rep(0, nCov))
betas <- as.matrix(c(rnorm(5), rep(0, nCov - 5)), ncol = 1)
y <- cov%*%betas
data <- data.frame(y = y, cov)
head(data)
head(data,2)
vars <- paste0("X", 1:nCov)
formulas <- unlist(sapply(X = 1:nCov, FUN = function(x) combn(x = vars, m = x, simplify = F)),
recursive = F)
formulas <- sapply(X = formulas, FUN = function(x) paste("y ~", paste(x, collapse = "+")))
formulas[1]
formulas[2]
formulas[20]
formulas[200]
aic_for <- data.frame(matrix(0, nrow = 2^nCov - 1, ncol = 2))
names(aic_for) <- c("Índice", "AIC")
t1 <- system.time(
for(i in 1:length(formulas)){
reg <- lm(formula = formulas[i], data = data)
aic_for[i, ] <- c(i, AIC(reg))
}
)
t1[3]
aic_for %>% arrange(AIC) %>% slice(1) %>% .$"Índice" %>% formulas[.]
t2 <- system.time(
aic_dopar <- foreach(n = 1:length(formulas),
.combine = 'rbind') %dopar% {
reg <- lm(formula = formulas[n], data = data)
c(n, AIC(reg))
}
)
n
nCOv
nCov
aic_dopar <- data.frame(aic_dopar)
names(aic_dopar) <- c("Índice", "AIC")
aic_dopar %>% arrange(AIC) %>% slice(1) %>% .$"Índice" %>% formulas[.]
t1[3]
t2[3]
n <- 100
nRep <- 1000
medias <- foreach(n = 1:nRep, .combine = 'c') %dopar% {
mean(rnorm(n))
}
medias
medias <- foreach(n = 1:nRep, .combine = 'c') %dopar% {
return(mean(rnorm(n)))
a <- 2
}
head(medias)
medias <- foreach(n = 1:nRep, .combine = 'c') %dopar% {
mean(rnorm(n))
a <- 2
}
head(medias)
normal <- foreach(n = 1:nRep, .combine = 'cbind') %dopar% {
rnorm(n)
}
warnings()
normal <- foreach(n = 1:nRep, .combine = 'cbind') %dopar% {
rnorm(n)
}
warnings()
rnorm(n)
normal <- foreach(n = 1:nRep, .combine = 'rbind') %dopar% {
rnorm(n)
}
normal <- foreach(i = 1:nRep, .combine = 'rbind') %dopar% {
rnorm(n)
}
medias <- foreach(i = 1:nRep, .combine = 'c') %dopar% {
return(mean(rnorm(n)))
}
head(medias)
length(medias)
normal <- foreach(i = 1:nRep, .combine = 'rbind') %dopar% {
rnorm(n)
}
RS <- read.table(file = "RS.txt",
header = T,
sep = ";", dec = ".")
head(RS)
head(RS)
View(head(RS))
RS <- read.table(file = "RS.txt",
header = T,
sep = ";", dec = ".", encoding = 'latin1')
head(RS)
RS <- read.table(file = "RS.txt",
header = T,
sep = ";", dec = ".", encoding = 'utf8')
head(RS)
head(RS)
head(RS, 2)
RS_sexo <- RS %>%
group_by(COD_UF, NO_UF, COD_MUN, NO_MUN, SEXO) %>%
summarise(POP = sum(POP))
head(RS_sexo)
aggregate(POP ~ COD_UF + NO_UF + COD_MUN + NO_MUN + SEXO, data = RS)
RS_sexo_2 <- aggregate(POP ~ COD_UF + NO_UF + COD_MUN + NO_MUN + SEXO,
data = RS, FUN = sum)
RS_etnia <- RS %>%
group_by(COD_UF, NO_UF, COD_MUN, NO_MUN, ETNIA) %>%
summarise(POP = sum(POP))
head(RS_etnia)
RS_analf <- RS %>%
group_by(COD_UF, NO_UF, COD_MUN, NO_MUN, LE_ESCREVE) %>%
summarise(POP = sum(POP))
RS_situacao <- RS %>%
group_by(COD_UF, NO_UF, COD_MUN, NO_MUN, SIT_DOM) %>%
summarise(POP = sum(POP))
head(RS_sexo)
cod_tf <- 4322004
cod_tf <- 4322004
head)RS_sexo
head(RS_sexo)
TF_sexo <- subset(RS_sexo, COD_MUN == cod_tf)
TF_sexo
TF_etnia <- subset(RS_etnia, COD_MUN == cod_tf)
TF_analf <- subset(RS_analf, COD_MUN == cod_tf)
TF_situacao <- subset(RS_situacao, COD_MUN == cod_tf)
TF_situacao
paste0(cod_tf, ".html")
head(RS_analf)
rmarkdown::render(input = "../../relatorio/relatorio.Rmd",
output_dir = "../../",
output_file = paste0(cod_tf, ".html"),
intermediates_dir =  tempfile(),
params = list(estado = unique(TF_sexo$NO_UF),
cidade = unique(TF_sexo$NO_MUN),
pop_sexo = TF_sexo,
pop_etnia = TF_etnia,
pop_analf = TF_analf,
pop_situacao = TF_situacao))
